---
import { Header } from "@/components/Header";
import { Footer } from "@/components/Footer";

export interface Props {
  title: string;
}

const { title } = Astro.props;

const isHomePage = Astro.url.pathname === "/";
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <!-- Favicons generated from https://www.favicon-generator.org/ -->
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192"  href="/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">
    <!-- End of generated favicon elements -->
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <script>
      let darkModeMediaQuery = window.matchMedia(
        "(prefers-color-scheme: dark)"
      );

      updateMode();
      darkModeMediaQuery.addEventListener(
        "change",
        updateModeWithoutTransitions
      );
      window.addEventListener("storage", updateModeWithoutTransitions);

      function updateMode() {
        let isSystemDarkMode = darkModeMediaQuery.matches;
        let isDarkMode =
          window.localStorage.isDarkMode === "true" ||
          (!("isDarkMode" in window.localStorage) && isSystemDarkMode);

        if (isDarkMode) {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }

        if (isDarkMode === isSystemDarkMode) {
          delete window.localStorage.isDarkMode;
        }
      }

      function disableTransitionsTemporarily() {
        document.documentElement.classList.add("[&_*]:!transition-none");
        window.setTimeout(() => {
          document.documentElement.classList.remove("[&_*]:!transition-none");
        }, 0);
      }

      function updateModeWithoutTransitions() {
        disableTransitionsTemporarily();
        updateMode();
      }
    </script>
  </head>
  <body>
    <body class="flex h-full flex-col bg-zinc-50 dark:bg-black">
      <div class="fixed inset-0 flex justify-center sm:px-8">
        <div class="flex w-full max-w-7xl lg:px-8">
          <div
            class="w-full bg-white ring-1 ring-zinc-100 dark:bg-zinc-900 dark:ring-zinc-300/20"
          >
          </div>
        </div>
      </div>
      <div class="relative">
        <Header isHomePage={isHomePage} client:load />
        <main id="swup" class="swup-transition-main"><slot /></main>
        <Footer />
      </div>
    </body>
  </body>
</html>
